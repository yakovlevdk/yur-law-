// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  quizAttempts QuizAttempt[]
  userProgress UserProgress[]

  @@map("users")
}

model Subject {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  description String
  icon        String
  topicsCount Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  topics Topic[]

  @@map("subjects")
}

model Topic {
  id            String   @id @default(cuid())
  subjectId     String
  title         String
  description   String
  questionsCount Int     @default(0)
  difficulty    String   // 'easy', 'medium', 'hard'
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  subject      Subject      @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  questions    Question[]
  quizAttempts QuizAttempt[]
  userProgress UserProgress[]

  @@map("topics")
}

model Question {
  id           String   @id @default(cuid())
  topicId      String
  text         String
  type         String   // 'single', 'multiple', 'boolean'
  options      Json     // Array of options
  correctAnswer Json    // Correct answer(s)
  explanation  String?
  difficulty   String   // 'easy', 'medium', 'hard'
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  topic Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@map("questions")
}

model QuizAttempt {
  id        String   @id @default(cuid())
  userId    String?
  topicId   String
  score     Int      // Percentage
  totalQuestions Int
  correctAnswers Int
  completedAt DateTime @default(now())

  // Relations
  user  User?  @relation(fields: [userId], references: [id], onDelete: SetNull)
  topic Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@map("quiz_attempts")
}

model UserProgress {
  id           String   @id @default(cuid())
  userId       String
  topicId      String
  masteryLevel Int      @default(0) // 0-5 (SM-2 algorithm)
  nextReview   DateTime?
  lastReviewed DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@unique([userId, topicId])
  @@map("user_progress")
}